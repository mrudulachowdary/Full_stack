{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhil\\\\Desktop\\\\CRUD-master\\\\CRUD-master\\\\src\\\\components\\\\InventoryTable.js\";\nimport React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Table } from 'antd';\n\nvar _ = require('lodash');\n\nconst isEmpty = require('is-empty');\n\nconst InventoryTable = props => {\n  const columnNames = [{\n    title: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 20\n      }\n    }, \"Type\"),\n    key: 'type',\n    dataIndex: 'type'\n  }, {\n    title: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 18\n      }\n    }, \"Manufacturer\"),\n    key: 'manufacturer',\n    dataIndex: 'manufacturer',\n    sorter: (a, b) => a.manufacturer - b.manufacturer\n  }, {\n    title: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 20\n      }\n    }, \"Model\"),\n    key: 'model',\n    dataIndex: 'model'\n  }, {\n    title: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 20\n      }\n    }, \"Serial Number\"),\n    key: 'serial_number',\n    dataIndex: 'serial_number'\n  }, {\n    title: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 20\n      }\n    }, \"Vendor\"),\n    key: 'vendor',\n    dataIndex: 'vendor'\n  }, {\n    title: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 20\n      }\n    }, \"Cost\"),\n    key: 'cost',\n    dataIndex: 'cost',\n    sorter: (a, b) => a.cost - b.cost\n  }, {\n    title: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 20\n      }\n    }, \"Purchased Date\"),\n    key: 'date_purchased',\n    dataIndex: 'date_purchased'\n  }, {\n    title: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 20\n      }\n    }, \"Purchased By\"),\n    key: 'purchased_by',\n    dataIndex: 'purchased_by'\n  }, {\n    title: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 20\n      }\n    }, \"Count\"),\n    key: 'count',\n    dataIndex: 'count',\n    sorter: (a, b) => a.count - b.count\n  }, {\n    title: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 20\n      }\n    }, \"Location\"),\n    key: 'location',\n    dataIndex: 'location'\n  }]; // Get the Inventory List\n\n  let dataDisplay = {};\n  const [selectionType] = useState('radio');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    tableLayout: \"fixed\",\n    columns: columnNames,\n    dataSource: props.dataDisplay,\n    rowKey: \"id\",\n    rowSelection: {\n      selectedRowKeys: props.selectedRowKeys,\n      type: selectionType,\n      onChange: (selectedRowKeys, selectedRows) => {\n        if (!isEmpty(selectedRows)) props.selectedRecordFunction({\n          selectedRecord: selectedRows[0],\n          selectedRowKeys: selectedRowKeys\n        });else props.selectedRecordFunction({\n          selectedRecord: {},\n          selectedRowKeys: []\n        });\n      }\n    },\n    scroll: {\n      x: 'max-content'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default InventoryTable;","map":{"version":3,"sources":["C:/Users/abhil/Desktop/CRUD-master/CRUD-master/src/components/InventoryTable.js"],"names":["React","useState","Table","_","require","isEmpty","InventoryTable","props","columnNames","title","fontWeight","key","dataIndex","sorter","a","b","manufacturer","cost","count","dataDisplay","selectionType","selectedRowKeys","type","onChange","selectedRows","selectedRecordFunction","selectedRecord","x"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Table } from 'antd';\n\nvar _= require('lodash');\nconst isEmpty = require('is-empty');\n\nconst InventoryTable = (props) => {\n\n    const columnNames = [\n        {\n            title: <span style={{fontWeight: 'bold'}}>Type</span>,\n            key: 'type',\n            dataIndex: 'type'\n        },\n        {\n          title: <span style={{fontWeight: 'bold'}}>Manufacturer</span>,\n          key:'manufacturer',\n          dataIndex: 'manufacturer',\n          sorter: (a,b) => a.manufacturer - b.manufacturer\n        },\n        {\n            title: <span style={{fontWeight: 'bold'}}>Model</span>,\n            key:'model',\n            dataIndex: 'model'\n        },\n        {\n            title: <span style={{fontWeight: 'bold'}}>Serial Number</span>,\n            key:'serial_number',\n            dataIndex: 'serial_number'\n        },\n        {\n            title: <span style={{fontWeight: 'bold'}}>Vendor</span>,\n            key:'vendor',\n            dataIndex: 'vendor'\n        }, \n        {\n            title: <span style={{fontWeight: 'bold'}}>Cost</span>,\n            key:'cost',\n            dataIndex: 'cost',\n            sorter: (a, b) => a.cost - b.cost\n        }, \n        {\n            title: <span style={{fontWeight: 'bold'}}>Purchased Date</span>,\n            key:'date_purchased',\n            dataIndex: 'date_purchased'\n        },\n        {\n            title: <span style={{fontWeight: 'bold'}}>Purchased By</span>,\n            key:'purchased_by',\n            dataIndex: 'purchased_by'\n        },\n        {\n            title: <span style={{fontWeight: 'bold'}}>Count</span>,\n            key:'count',\n            dataIndex: 'count',\n            sorter: (a, b) => a.count - b.count\n        },\n        {\n            title: <span style={{fontWeight: 'bold'}}>Location</span>,\n            key:'location',\n            dataIndex: 'location'\n        } \n    ];\n\n        // Get the Inventory List\n        let dataDisplay = {};\n        const   [selectionType] = useState('radio')\n\n        return(\n            <div>\n                <Table\n                    tableLayout='fixed'\n                    columns = {columnNames}\n                    dataSource = {props.dataDisplay}\n                    rowKey='id'\n                    rowSelection={{\n                        selectedRowKeys: props.selectedRowKeys,\n                        type: selectionType,\n                        onChange: (selectedRowKeys, selectedRows) => {\n                            if (!isEmpty(selectedRows)) \n                                props.selectedRecordFunction({ selectedRecord: selectedRows[0],\n                                                                selectedRowKeys: selectedRowKeys });\n                            else\n                                props.selectedRecordFunction({ selectedRecord: {}, selectedRowKeys: [] });\n                        }\n                    }}\n                    scroll={{ x: 'max-content' }}\n                />\n            </div>\n        )\n};\n\nexport default InventoryTable;"]},"metadata":{},"sourceType":"module"}