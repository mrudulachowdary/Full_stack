{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhil\\\\Desktop\\\\CRUD-master\\\\CRUD-master\\\\src\\\\components\\\\CreateInventory.js\";\nimport React, { Component } from 'react';\nimport { Form, Button, Row, Col, Input, InputNumber, DatePicker, Select, Modal } from 'antd';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { createInventoryData, createInventoryRes } from '../actions/createInventoryAction';\nimport { getInventory } from '../actions/readInventoryAction';\nimport moment from 'moment';\nconst {\n  Option\n} = Select;\n\nvar _ = require('lodash');\n\nclass CreateInventory extends Component {\n  constructor(...args) {\n    super(...args);\n    this.formRef = React.createRef();\n    this.formControlPosition = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 24\n        },\n        md: {\n          span: 6\n        },\n        lg: {\n          span: 5\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 24\n        },\n        md: {\n          span: 8\n        },\n        lg: {\n          span: 5\n        }\n      }\n    };\n    this.formControlButtonPosition = {\n      wrapperCol: {\n        xs: {\n          offset: 0,\n          span: 24\n        },\n        sm: {\n          offset: 0,\n          span: 24\n        },\n        md: {\n          offset: 6,\n          span: 19\n        },\n        lg: {\n          offset: 5,\n          span: 20\n        }\n      }\n    };\n\n    this.onCreateClick = values => {\n      console.log('check the values: ', values);\n      let setId = 1; //set random number of Id.\n\n      let checkIdFlag = false;\n\n      do {\n        setId = Math.floor(Math.random() * Math.floor(1000));\n        checkIdFlag = false;\n\n        if (!_.isNil(this.props) && !_.isNil(this.props.getInventoryList) && !_.isNil(this.props.getInventoryList.getInventoryList) && !_.isNil(this.props.getInventoryList.getInventoryList.inventory) && !isEmpty(!_.isNil(this.props.getInventoryList.getInventoryList.inventory))) {\n          this.props.getInventoryList.getInventoryList.inventory.map(rec => {\n            if (!_.isNil(rec.id)) {\n              if (rec.id === setId) checkIdFlag = true;\n            }\n\n            return rec;\n          });\n        }\n      } while (checkIdFlag);\n\n      let apiInput = {};\n      apiInput['id'] = Math.floor(Math.random() * Math.floor(1000));\n      apiInput['type'] = values.type;\n      apiInput['manufacturer'] = values.manufacturer;\n      apiInput['model'] = values.model;\n      apiInput['serial_number'] = values.serial_number;\n      apiInput['vendor'] = values.vendor;\n      apiInput['cost'] = values.cost;\n      apiInput['date_purchased'] = values.date_purchased;\n      apiInput['purchased_by'] = values.purchased_by;\n      apiInput['count'] = values.count;\n      apiInput['location'] = values.location;\n      this.props.createInventoryData(apiInput).then(res => {\n        console.log('check the response for create: ', res);\n        let createInventoryResponse = 'FAILURE';\n        if (!_.isNil(this.props.createInventoryResList) && !_.isNil(this.props.createInventoryResList.createInventoryResList) && this.props.createInventoryResList.createInventoryResList === 'SUCCESS') createInventoryResponse = 'SUCCESS';\n        Modal.info({\n          title: createInventoryResponse === 'SUCCESS' ? 'Successfully created the record' : 'Unable to create a record'\n        });\n        this.props.createInventoryRes(null);\n        this.props.getInventory();\n      });\n    };\n\n    this.purchasedByData = [\"Amith\", \"Amanda\", \"Kevin\"];\n  }\n\n  render() {\n    console.log('check the props in create: ', this.props);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form, Object.assign({}, this.formControlPosition, {\n      ref: this.formRef,\n      name: \"control-ref\",\n      onFinish: values => this.onCreateClick(values),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Type\",\n      name: \"type\",\n      rules: [{\n        required: true,\n        message: 'Please input Type'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Manufacturer\",\n      name: \"manufacturer\",\n      rules: [{\n        required: true,\n        message: 'Please input Manufacturer'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Model\",\n      name: \"model\",\n      rules: [{\n        required: true,\n        message: 'Please input Model'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Serial Number\",\n      name: \"serial_number\",\n      rules: [{\n        required: true,\n        message: 'Please input Serial Number'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Vendor\",\n      name: \"vendor\",\n      rules: [{\n        required: true,\n        message: 'Please input Vendor'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Cost\",\n      name: \"cost\",\n      rules: [{\n        required: true,\n        message: 'Please input cost'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(InputNumber, {\n      max: 100000,\n      min: 1,\n      formatter: value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ','),\n      parser: value => value.replace(/\\$\\s?|(,*)/g, ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Purchased Date\",\n      name: \"date_purchased\",\n      rules: [{\n        required: true,\n        message: 'Please input Purchased Date'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(DatePicker, {\n      format: \"YYYY-MM-DD\",\n      inputReadOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Purchased By\",\n      name: \"purchased_by\",\n      rules: [{\n        required: true,\n        message: 'Please input Purchased By'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      placeholder: \"Select User\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 45\n      }\n    }, this.purchasedByData.map(user => {\n      return /*#__PURE__*/React.createElement(Option, {\n        key: user,\n        value: user,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 61\n        }\n      }, user);\n    }))), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Count\",\n      name: \"count\",\n      rules: [{\n        required: true,\n        message: 'Please input Count'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Location\",\n      name: \"location\",\n      rules: [{\n        required: true,\n        message: 'Please input Location'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, this.formControlButtonPosition, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 33\n      }\n    }, \"CREATE\"))))));\n  }\n\n}\n\n;\n\nfunction mapStateToProps(state) {\n  return {\n    getInventoryList: state.getInventoryList,\n    createInventoryResList: state.createInventoryResList\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getInventory,\n    createInventoryData,\n    createInventoryRes\n  }, dispatch);\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateInventory));","map":{"version":3,"sources":["C:/Users/abhil/Desktop/CRUD-master/CRUD-master/src/components/CreateInventory.js"],"names":["React","Component","Form","Button","Row","Col","Input","InputNumber","DatePicker","Select","Modal","connect","bindActionCreators","withRouter","createInventoryData","createInventoryRes","getInventory","moment","Option","_","require","CreateInventory","formRef","createRef","formControlPosition","labelCol","xs","span","sm","md","lg","wrapperCol","formControlButtonPosition","offset","onCreateClick","values","console","log","setId","checkIdFlag","Math","floor","random","isNil","props","getInventoryList","inventory","isEmpty","map","rec","id","apiInput","type","manufacturer","model","serial_number","vendor","cost","date_purchased","purchased_by","count","location","then","res","createInventoryResponse","createInventoryResList","info","title","purchasedByData","render","required","message","value","replace","user","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Form, Button, Row, Col, Input, InputNumber, DatePicker, Select, Modal} from 'antd';\nimport { connect } from 'react-redux';\nimport {bindActionCreators} from 'redux'; \nimport { withRouter } from 'react-router-dom';\nimport {createInventoryData, createInventoryRes} from '../actions/createInventoryAction';\nimport {getInventory} from '../actions/readInventoryAction';\nimport moment from 'moment';\n\nconst { Option } = Select;\nvar _= require('lodash');\n\nclass CreateInventory extends Component{\n    // To call form method use ref for class component.\n    formRef = React.createRef();\n\n    formControlPosition = {\n        labelCol: {\n            xs: { span: 24 },\n            sm: { span: 24 },\n            md: { span: 6 },\n            lg: { span: 5 }\n        },\n        wrapperCol:{\n            xs: { span: 24 },\n            sm: { span: 24 },\n            md: { span: 8 },\n            lg: { span: 5 }\n        }\n    };\n    formControlButtonPosition = {\n        wrapperCol:{\n            xs: { offset: 0, span: 24 },\n            sm: { offset: 0, span: 24 },\n            md: { offset: 6, span: 19 },\n            lg: { offset: 5, span: 20 }\n        }\n    }\n\n    onCreateClick = (values) => {\n        console.log('check the values: ', values);\n        let setId = 1; //set random number of Id.\n        let checkIdFlag = false;\n\n        do{\n            setId = Math.floor(Math.random() * Math.floor(1000));\n            checkIdFlag = false;\n            if (!_.isNil(this.props) && !_.isNil(this.props.getInventoryList) && !_.isNil(this.props.getInventoryList.getInventoryList) &&\n            !_.isNil(this.props.getInventoryList.getInventoryList.inventory) && !isEmpty(!_.isNil(this.props.getInventoryList.getInventoryList.inventory))){\n                this.props.getInventoryList.getInventoryList.inventory.map(rec => {\n                    if (!_.isNil(rec.id)){\n                        if (rec.id === setId)\n                            checkIdFlag = true;\n                    }\n                    return rec;\n                })\n            }\n        }while(checkIdFlag)\n\n\n        let apiInput = {};\n        apiInput['id'] = Math.floor(Math.random() * Math.floor(1000));\n        apiInput['type'] = values.type;\n        apiInput['manufacturer'] = values.manufacturer;\n        apiInput['model'] = values.model;\n        apiInput['serial_number'] = values.serial_number;\n        apiInput['vendor'] = values.vendor;\n        apiInput['cost'] = values.cost;\n        apiInput['date_purchased'] = values.date_purchased;\n        apiInput['purchased_by'] = values.purchased_by;\n        apiInput['count'] = values.count;\n        apiInput['location'] = values.location;\n        this.props.createInventoryData(apiInput)\n            .then(res => {\n                console.log('check the response for create: ', res);\n                let createInventoryResponse = 'FAILURE';\n                if (!_.isNil(this.props.createInventoryResList) && !_.isNil(this.props.createInventoryResList.createInventoryResList) &&\n                    this.props.createInventoryResList.createInventoryResList === 'SUCCESS')\n                    createInventoryResponse = 'SUCCESS';\n                Modal.info({\n                    title: createInventoryResponse === 'SUCCESS'?'Successfully created the record':'Unable to create a record'\n                });\n                this.props.createInventoryRes(null);\n                this.props.getInventory();\n            });\n    }\n\n    purchasedByData = [\"Amith\", \"Amanda\", \"Kevin\"];\n\n    render(){\n        console.log('check the props in create: ', this.props);\n        return(\n            <div>\n                <Row>\n                    <Col span={24}>\n                        <Form\n                            {...this.formControlPosition}\n                            ref={this.formRef}\n                            name='control-ref'\n                            onFinish={(values) => this.onCreateClick(values)}\n                        >\n                            <Form.Item\n                                label='Type'\n                                name='type'\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input Type'\n                                    }\n                                ]}>\n                                        <Input />\n                            </Form.Item>\n                            <Form.Item\n                                label='Manufacturer'\n                                name='manufacturer'\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input Manufacturer'\n                                    }\n                                ]}>\n                                        <Input />\n                            </Form.Item>\n                            <Form.Item\n                                label='Model'\n                                name='model'\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input Model'\n                                    }\n                                ]}>\n                                        <Input />\n                            </Form.Item>\n                            <Form.Item\n                                label='Serial Number'\n                                name='serial_number'\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input Serial Number'\n                                    }\n                                ]}>\n                                        <Input />\n                            </Form.Item>\n                            <Form.Item\n                                label='Vendor'\n                                name='vendor'\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input Vendor'\n                                    }\n                                ]}>\n                                        <Input />\n                            </Form.Item>\n                            <Form.Item\n                                label='Cost'\n                                name='cost'\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input cost'\n                                    }\n                                ]}>\n                                        <InputNumber\n                                            max={100000}\n                                            min={1}\n                                            formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')} />\n                            </Form.Item>\n                            <Form.Item\n                                label='Purchased Date'\n                                name='date_purchased'\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input Purchased Date'\n                                    }\n                                ]}>\n                                        <DatePicker\n                                            format='YYYY-MM-DD'\n                                            inputReadOnly\n                                        />\n                            </Form.Item>\n                            <Form.Item\n                                label='Purchased By'\n                                name='purchased_by'\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input Purchased By'\n                                    }\n                                ]}>\n                                            <Select\n                                                placeholder='Select User'\n                                                >\n                                                {\n                                                    this.purchasedByData.map(user => {\n                                                        return(\n                                                            <Option key={user} value={user}>{user}</Option>\n                                                        )\n                                                    })\n                                                }\n                                            </Select>   \n                            </Form.Item>\n                            <Form.Item\n                                label='Count'\n                                name='count'\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input Count'\n                                    }\n                                ]}>\n                                        <Input />\n                            </Form.Item>\n                            <Form.Item\n                                label='Location'\n                                name='location'\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input Location'\n                                    }\n                                ]}>\n                                        <Input />\n                            </Form.Item>\n                            <Form.Item {...this.formControlButtonPosition}>\n                                <Button\n                                    type='primary'\n                                    htmlType='submit'\n                                    size='large'>\n                                    CREATE\n                                </Button>\n                            </Form.Item>\n                        </Form>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}; \n\nfunction mapStateToProps(state){\n    return{\n        getInventoryList: state.getInventoryList,\n        createInventoryResList: state.createInventoryResList\n    }\n}\n\nfunction mapDispatchToProps(dispatch){\n    return bindActionCreators({ getInventory, createInventoryData, createInventoryRes }, dispatch);\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateInventory));"]},"metadata":{},"sourceType":"module"}