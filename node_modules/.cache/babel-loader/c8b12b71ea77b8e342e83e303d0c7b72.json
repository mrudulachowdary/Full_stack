{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhil\\\\Desktop\\\\CRUD-master\\\\CRUD-master\\\\src\\\\components\\\\UpdateInventory.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport { Row, Col, Form, Input, Select, InputNumber, DatePicker, Button, Modal } from 'antd';\nimport { getInventory } from '../actions/readInventoryAction';\nimport { updateInventoryData, updateInventoryRes } from '../actions/updateInventoryAction';\nimport data from '../data.json';\nimport UpdateInventoryTable from './InventoryTable';\nimport moment from 'moment';\nimport InventoryTable from './InventoryTable';\n\nvar _ = require('lodash');\n\nconst isEmpty = require('is-empty');\n\nconst {\n  Option\n} = Select;\n\nclass UpdateInventory extends Component {\n  constructor() {\n    super();\n    this.formRef = React.createRef();\n    this.formControlPosition = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 24\n        },\n        md: {\n          span: 6\n        },\n        lg: {\n          span: 5\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 24\n        },\n        md: {\n          span: 8\n        },\n        lg: {\n          span: 5\n        }\n      }\n    };\n    this.formControlButtonPosition = {\n      wrapperCol: {\n        xs: {\n          offset: 0,\n          span: 24\n        },\n        sm: {\n          offset: 0,\n          span: 24\n        },\n        md: {\n          offset: 6,\n          span: 19\n        },\n        lg: {\n          offset: 5,\n          span: 20\n        }\n      }\n    };\n    this.purchasedByData = [\"Amith\", \"Amanda\", \"Kevin\"];\n\n    this.callBackFunc = callBackData => {\n      console.log('check the selected rows----: ', callBackData.selectedRecord, callBackData.selectedRowKeys); // set the form values\n\n      if (!isEmpty(callBackData.selectedRecord) && !_.isNil(this.formRef.current)) {\n        console.log('check the formRef: ', this.formRef);\n        this.formRef.current.setFieldsValue({\n          type: !_.isNil(callBackData.selectedRecord.type) ? callBackData.selectedRecord.type : '',\n          manufacturer: !_.isNil(callBackData.selectedRecord.manufacturer) ? callBackData.selectedRecord.manufacturer : '',\n          model: !_.isNil(callBackData.selectedRecord.model) ? callBackData.selectedRecord.model : '',\n          serial_number: !_.isNil(callBackData.selectedRecord.serial_number) ? callBackData.selectedRecord.serial_number : '',\n          vendor: !_.isNil(callBackData.selectedRecord.vendor) ? callBackData.selectedRecord.vendor : '',\n          cost: !_.isNil(callBackData.selectedRecord.cost) ? callBackData.selectedRecord.cost : '',\n          date_purchased: !_.isNil(callBackData.selectedRecord.date_purchased) ? moment(callBackData.selectedRecord.date_purchased) : '',\n          purchased_by: !_.isNil(callBackData.selectedRecord.purchased_by) ? callBackData.selectedRecord.purchased_by : '',\n          count: !_.isNil(callBackData.selectedRecord.count) ? callBackData.selectedRecord.count : '',\n          location: !_.isNil(callBackData.selectedRecord.location) ? callBackData.selectedRecord.location : ''\n        });\n      }\n\n      this.setState({\n        selectedRecord: callBackData.selectedRecord,\n        selectedRowKeys: callBackData.selectedRowKeys\n      });\n    };\n\n    this.onUpdateClick = values => {\n      let apiInput = {};\n      apiInput['type'] = values.type;\n      apiInput['manufacturer'] = values.manufacturer;\n      apiInput['model'] = values.model;\n      apiInput['serial_number'] = values.serial_number;\n      apiInput['vendor'] = values.vendor;\n      apiInput['cost'] = values.cost;\n      apiInput['date_purchased'] = values.date_purchased;\n      apiInput['purchased_by'] = values.purchased_by;\n      apiInput['count'] = values.count;\n      apiInput['location'] = values.location;\n      this.props.updateInventoryData(apiInput).then(res => {\n        console.log('check the response for create: ', res);\n        let updateInventoryResponse = 'FAILURE';\n        if (!_.isNil(this.props.updateInventoryResList) && !_.isNil(this.props.createInventoryResList.updateInventoryResList) && this.props.createInventoryResList.updateInventoryResList === 'SUCCESS') updateInventoryResponse = 'SUCCESS';\n        Modal.info({\n          title: updateInventoryResponse === 'SUCCESS' ? 'Successfully updated the record' : 'Unable to update the record'\n        });\n        this.props.updateInventoryRes(null);\n        this.props.getInventory();\n      });\n    };\n\n    this.state = {\n      selectedRowKeys: [],\n      selectedRecord: {}\n    };\n  }\n\n  render() {\n    let dataDisplay = {};\n    const {\n      selectedRowKeys,\n      selectedRecord\n    } = this.state;\n    dataDisplay = data.inventoryRead;\n    console.log('check the props: ', this.props);\n\n    if (!_.isNil(this.props) && !_.isNil(this.props.getInventoryList) && !_.isNil(this.props.getInventoryList.getInventoryList) && !isEmpty(this.props.getInventoryList.getInventoryList)) {\n      dataDisplay = this.props.getInventoryList.getInventoryList;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, !isEmpty(dataDisplay) && /*#__PURE__*/React.createElement(InventoryTable, {\n      selectedRecordFunction: this.callBackFunc,\n      selectedRowKeys: selectedRowKeys,\n      dataDisplay: dataDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, !isEmpty(dataDisplay) && !isEmpty(selectedRecord) ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, Object.assign({}, this.formControlPosition, {\n      ref: this.formRef,\n      name: \"control-ref\",\n      initialValues: {\n        type: '',\n        manufacturer: '',\n        model: '',\n        serial_number: '',\n        vendor: '',\n        cost: '',\n        date_purchased: '',\n        purchased_by: '',\n        count: '',\n        location: ''\n      },\n      onFinish: values => this.onUpdateClick(values),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Type\",\n      name: \"type\",\n      rules: [{\n        required: true,\n        message: 'Please input Type'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Manufacturer\",\n      name: \"manufacturer\",\n      rules: [{\n        required: true,\n        message: 'Please input Manufacturer'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Model\",\n      name: \"model\",\n      rules: [{\n        required: true,\n        message: 'Please input Model'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Serial Number\",\n      name: \"serial_number\",\n      rules: [{\n        required: true,\n        message: 'Please input Serial Number'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Vendor\",\n      name: \"vendor\",\n      rules: [{\n        required: true,\n        message: 'Please input Vendor'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Cost\",\n      name: \"cost\",\n      rules: [{\n        required: true,\n        message: 'Please input cost'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(InputNumber, {\n      max: 100000,\n      min: 1,\n      formatter: value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ','),\n      parser: value => value.replace(/\\$\\s?|(,*)/g, ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Purchased Date\",\n      name: \"date_purchased\",\n      rules: [{\n        required: true,\n        message: 'Please input Purchased Date'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(DatePicker, {\n      format: \"YYYY-MM-DD\",\n      inputReadOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Purchased By\",\n      name: \"purchased_by\",\n      rules: [{\n        required: true,\n        message: 'Please input Purchased By'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      placeholder: \"Select User\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 53\n      }\n    }, this.purchasedByData.map(user => {\n      return /*#__PURE__*/React.createElement(Option, {\n        key: user,\n        value: user,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 69\n        }\n      }, user);\n    }))), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Count\",\n      name: \"count\",\n      rules: [{\n        required: true,\n        message: 'Please input Count'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"Location\",\n      name: \"location\",\n      rules: [{\n        required: true,\n        message: 'Please input Location'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, this.formControlButtonPosition, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 41\n      }\n    }, \"UPDATE\")))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      name: \"control-ref\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 37\n      }\n    })))));\n  }\n\n}\n\n;\n\nfunction mapStateToProps(state) {\n  return {\n    getInventoryList: state.getInventoryList\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getInventory,\n    updateInventoryData,\n    updateInventoryRes\n  }, dispatch);\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(UpdateInventory));","map":{"version":3,"sources":["C:/Users/abhil/Desktop/CRUD-master/CRUD-master/src/components/UpdateInventory.js"],"names":["React","Component","connect","bindActionCreators","withRouter","Row","Col","Form","Input","Select","InputNumber","DatePicker","Button","Modal","getInventory","updateInventoryData","updateInventoryRes","data","UpdateInventoryTable","moment","InventoryTable","_","require","isEmpty","Option","UpdateInventory","constructor","formRef","createRef","formControlPosition","labelCol","xs","span","sm","md","lg","wrapperCol","formControlButtonPosition","offset","purchasedByData","callBackFunc","callBackData","console","log","selectedRecord","selectedRowKeys","isNil","current","setFieldsValue","type","manufacturer","model","serial_number","vendor","cost","date_purchased","purchased_by","count","location","setState","onUpdateClick","values","apiInput","props","then","res","updateInventoryResponse","updateInventoryResList","createInventoryResList","info","title","state","render","dataDisplay","inventoryRead","getInventoryList","required","message","value","replace","map","user","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {bindActionCreators} from 'redux'; \nimport { withRouter } from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport { Row, Col, Form, Input, Select, InputNumber, DatePicker, Button, Modal  } from 'antd';\nimport {getInventory} from '../actions/readInventoryAction';\nimport {updateInventoryData, updateInventoryRes} from '../actions/updateInventoryAction';\nimport data from '../data.json';\nimport UpdateInventoryTable from './InventoryTable';\nimport moment from 'moment';\nimport InventoryTable from './InventoryTable';\n\nvar _= require('lodash');\nconst isEmpty = require('is-empty');\nconst { Option } = Select;\n\nclass UpdateInventory extends Component{\n    constructor(){\n        super();\n        this.state = {\n            selectedRowKeys: [],\n            selectedRecord: {}\n        }\n    }\n\n    formRef = React.createRef();\n\n    formControlPosition = {\n        labelCol: {\n            xs: { span: 24 },\n            sm: { span: 24 },\n            md: { span: 6 },\n            lg: { span: 5 }\n        },\n        wrapperCol:{\n            xs: { span: 24 },\n            sm: { span: 24 },\n            md: { span: 8 },\n            lg: { span: 5 }\n        }\n    };\n    formControlButtonPosition = {\n        wrapperCol:{\n            xs: { offset: 0, span: 24 },\n            sm: { offset: 0, span: 24 },\n            md: { offset: 6, span: 19 },\n            lg: { offset: 5, span: 20 }\n        }\n    }\n\n    purchasedByData = [\"Amith\", \"Amanda\", \"Kevin\"];\n\n    callBackFunc = (callBackData) => {\n        console.log('check the selected rows----: ',  callBackData.selectedRecord, callBackData.selectedRowKeys );\n        // set the form values\n        if (!isEmpty(callBackData.selectedRecord) && !_.isNil(this.formRef.current)){\n            console.log('check the formRef: ', this.formRef);\n            this.formRef.current.setFieldsValue({\n                type: !_.isNil(callBackData.selectedRecord.type)?callBackData.selectedRecord.type:'',\n                manufacturer: !_.isNil(callBackData.selectedRecord.manufacturer)?callBackData.selectedRecord.manufacturer:'',\n                model: !_.isNil(callBackData.selectedRecord.model)?callBackData.selectedRecord.model:'',\n                serial_number: !_.isNil(callBackData.selectedRecord.serial_number)?callBackData.selectedRecord.serial_number:'',\n                vendor: !_.isNil(callBackData.selectedRecord.vendor)?callBackData.selectedRecord.vendor:'',\n                cost: !_.isNil(callBackData.selectedRecord.cost)?callBackData.selectedRecord.cost:'',\n                date_purchased: !_.isNil(callBackData.selectedRecord.date_purchased)?moment(callBackData.selectedRecord.date_purchased):'',\n                purchased_by: !_.isNil(callBackData.selectedRecord.purchased_by)?callBackData.selectedRecord.purchased_by:'',\n                count: !_.isNil(callBackData.selectedRecord.count)?callBackData.selectedRecord.count:'',\n                location: !_.isNil(callBackData.selectedRecord.location)?callBackData.selectedRecord.location:''\n            })\n        }\n        this.setState({ selectedRecord: callBackData.selectedRecord, selectedRowKeys: callBackData.selectedRowKeys });\n    }\n\n    onUpdateClick = (values) => {\n        let apiInput = {};\n        apiInput['type'] = values.type;\n        apiInput['manufacturer'] = values.manufacturer;\n        apiInput['model'] = values.model;\n        apiInput['serial_number'] = values.serial_number;\n        apiInput['vendor'] = values.vendor;\n        apiInput['cost'] = values.cost;\n        apiInput['date_purchased'] = values.date_purchased;\n        apiInput['purchased_by'] = values.purchased_by;\n        apiInput['count'] = values.count;\n        apiInput['location'] = values.location;\n        this.props.updateInventoryData(apiInput)\n            .then(res => {\n                console.log('check the response for create: ', res);\n                let updateInventoryResponse = 'FAILURE';\n                if (!_.isNil(this.props.updateInventoryResList) && !_.isNil(this.props.createInventoryResList.updateInventoryResList) &&\n                    this.props.createInventoryResList.updateInventoryResList === 'SUCCESS')\n                    updateInventoryResponse = 'SUCCESS';\n                Modal.info({\n                    title: updateInventoryResponse === 'SUCCESS'?'Successfully updated the record':'Unable to update the record'\n                });\n                this.props.updateInventoryRes(null);\n                this.props.getInventory();\n            })\n    }\n\n    render(){\n        let dataDisplay = {};\n        const { selectedRowKeys, selectedRecord } = this.state;\n        dataDisplay = data.inventoryRead;\n        console.log('check the props: ', this.props);\n        if (!_.isNil(this.props) && !_.isNil(this.props.getInventoryList) && !_.isNil(this.props.getInventoryList.getInventoryList) &&\n            !isEmpty(this.props.getInventoryList.getInventoryList)){\n            dataDisplay = this.props.getInventoryList.getInventoryList;\n        }\n        return(\n            <div>\n                <Row>\n                    <Col span={24}>\n                    {\n                        !isEmpty(dataDisplay) && \n                        <InventoryTable \n                            selectedRecordFunction = {this.callBackFunc}\n                            selectedRowKeys = {selectedRowKeys}\n                            dataDisplay = {dataDisplay}/>\n                    }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={24}>\n                        {\n                            !isEmpty(dataDisplay) && !isEmpty(selectedRecord)?(\n                            <div>\n                                <Form\n                                    {...this.formControlPosition}\n                                    ref={this.formRef}\n                                    name='control-ref'\n                                    initialValues={{    \n                                        type: '',\n                                        manufacturer: '',\n                                        model: '',\n                                        serial_number: '',\n                                        vendor: '',\n                                        cost: '',\n                                        date_purchased: '',\n                                        purchased_by: '',\n                                        count: '',\n                                        location: ''\n                                    }}\n                                    onFinish={(values) => this.onUpdateClick(values)}\n                                >\n                                    <Form.Item\n                                        label='Type'\n                                        name='type'\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Please input Type'\n                                            }\n                                        ]}>\n                                                <Input />\n                                    </Form.Item>\n                                    <Form.Item\n                                        label='Manufacturer'\n                                        name='manufacturer'\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Please input Manufacturer'\n                                            }\n                                        ]}>\n                                                <Input />\n                                    </Form.Item>\n                                    <Form.Item\n                                        label='Model'\n                                        name='model'\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Please input Model'\n                                            }\n                                        ]}>\n                                                <Input />\n                                    </Form.Item>\n                                    <Form.Item\n                                        label='Serial Number'\n                                        name='serial_number'\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Please input Serial Number'\n                                            }\n                                        ]}>\n                                                <Input />\n                                    </Form.Item>\n                                    <Form.Item\n                                        label='Vendor'\n                                        name='vendor'\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Please input Vendor'\n                                            }\n                                        ]}>\n                                                <Input />\n                                    </Form.Item>\n                                    <Form.Item\n                                        label='Cost'\n                                        name='cost'\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Please input cost'\n                                            }\n                                        ]}>\n                                                <InputNumber\n                                                    max={100000}\n                                                    min={1}\n                                                    formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')} />\n                                    </Form.Item>\n                                    <Form.Item\n                                        label='Purchased Date'\n                                        name='date_purchased'\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Please input Purchased Date'\n                                            }\n                                        ]}>\n                                                <DatePicker\n                                                    format='YYYY-MM-DD'\n                                                    inputReadOnly\n                                                />\n                                    </Form.Item>\n                                    <Form.Item\n                                        label='Purchased By'\n                                        name='purchased_by'\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Please input Purchased By'\n                                            }\n                                        ]}>\n                                                    <Select\n                                                        placeholder='Select User'\n                                                        >\n                                                        {\n                                                            this.purchasedByData.map(user => {\n                                                                return(\n                                                                    <Option key={user} value={user}>{user}</Option>\n                                                                )\n                                                            })\n                                                        }\n                                                    </Select>   \n                                    </Form.Item>\n                                    <Form.Item\n                                        label='Count'\n                                        name='count'\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Please input Count'\n                                            }\n                                        ]}>\n                                                <Input />\n                                    </Form.Item>\n                                    <Form.Item\n                                        label='Location'\n                                        name='location'\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Please input Location'\n                                            }\n                                        ]}>\n                                                <Input />\n                                    </Form.Item>\n                                    <Form.Item {...this.formControlButtonPosition}>\n                                        <Button\n                                            type='primary'\n                                            htmlType='submit'\n                                            size='large'>\n                                            UPDATE\n                                        </Button>\n                                    </Form.Item>\n                                </Form>\n                            </div>\n                            ):(\n                                <div>\n                                    <Form\n                                        ref={this.formRef}\n                                        name='control-ref'>\n\n                                    </Form>\n                                </div>\n                            )\n                        }\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n};\n\nfunction mapStateToProps(state){\n    return{\n        getInventoryList: state.getInventoryList\n    }\n}\n\nfunction mapDispatchToProps(dispatch){\n    return bindActionCreators({ getInventory, updateInventoryData, updateInventoryRes }, dispatch);\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(UpdateInventory));"]},"metadata":{},"sourceType":"module"}