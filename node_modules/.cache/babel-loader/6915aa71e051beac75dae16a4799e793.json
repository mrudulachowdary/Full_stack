{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhil\\\\Desktop\\\\MercuryWireless\\\\src\\\\components\\\\DeleteInventory.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport { Row, Col, Button, Modal } from 'antd';\nimport InventoryTable from './InventoryTable';\nimport { getInventory } from '../actions/readInventoryAction';\nimport { deleteInventoryData, deleteInventoryRes } from '../actions/deleteInventoryAction';\n\nvar _ = require('lodash');\n\nconst isEmpty = require('is-empty');\n\nclass DeleteInventory extends Component {\n  constructor() {\n    super();\n\n    this.callBackFunc = callBackData => {\n      this.setState({\n        selectedRecord: callBackData.selectedRecord,\n        selectedRowKeys: callBackData.selectedRowKeys\n      });\n    };\n\n    this.onDeleteClick = selectedRecord => {\n      this.props.deleteInventoryData(selectedRecord).then(res => {\n        let deleteInventoryResponse = 'FAILURE';\n\n        if (!_.isNil(this.props.deleteInventoryResList) && !_.isNil(this.props.deleteInventoryResList.deleteInventoryResList) && this.props.deleteInventoryResList.deleteInventoryResList === 'SUCCESS') {\n          deleteInventoryResponse = 'SUCCESS';\n        }\n\n        Modal.info({\n          title: deleteInventoryResponse === 'SUCCESS' ? 'Successfully deleted the record' : 'Unable to delete a record'\n        });\n        this.props.deleteInventoryRes(null);\n        this.props.getInventory();\n      });\n    };\n\n    this.state = {\n      selectedRowKeys: [],\n      selectedRecord: {}\n    };\n  }\n\n  render() {\n    let dataDisplay = {};\n    const {\n      selectedRowKeys,\n      selectedRecord\n    } = this.state;\n\n    if (!_.isNil(this.props) && !_.isNil(this.props.getInventoryList) && !_.isNil(this.props.getInventoryList.getInventoryList) && !_.isNil(this.props.getInventoryList.getInventoryList.inventory) && !isEmpty(!_.isNil(this.props.getInventoryList.getInventoryList.inventory))) {\n      dataDisplay = this.props.getInventoryList.getInventoryList.inventory;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, !isEmpty(dataDisplay) && /*#__PURE__*/React.createElement(InventoryTable, {\n      selectedRecordFunction: this.callBackFunc,\n      selectedRowKeys: selectedRowKeys,\n      dataDisplay: dataDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, !isEmpty(dataDisplay) && !isEmpty(selectedRecord) && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      size: \"large\",\n      onClick: () => this.onDeleteClick(selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 41\n      }\n    }, \"DELETE\")))))));\n  }\n\n}\n\n;\n\nfunction mapStateToProps(state) {\n  return {\n    getInventoryList: state.getInventoryList,\n    deleteInventoryResList: state.deleteInventoryResList\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getInventory,\n    deleteInventoryData,\n    deleteInventoryRes\n  }, dispatch);\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DeleteInventory));","map":{"version":3,"sources":["C:/Users/abhil/Desktop/MercuryWireless/src/components/DeleteInventory.js"],"names":["React","Component","connect","bindActionCreators","withRouter","Row","Col","Button","Modal","InventoryTable","getInventory","deleteInventoryData","deleteInventoryRes","_","require","isEmpty","DeleteInventory","constructor","callBackFunc","callBackData","setState","selectedRecord","selectedRowKeys","onDeleteClick","props","then","res","deleteInventoryResponse","isNil","deleteInventoryResList","info","title","state","render","dataDisplay","getInventoryList","inventory","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {bindActionCreators} from 'redux'; \nimport { withRouter } from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport { Row, Col, Button, Modal  } from 'antd';\nimport InventoryTable from './InventoryTable';\nimport {getInventory} from '../actions/readInventoryAction';\nimport {deleteInventoryData, deleteInventoryRes} from '../actions/deleteInventoryAction';\n\nvar _= require('lodash');\nconst isEmpty = require('is-empty');\n\nclass DeleteInventory extends Component{\n    constructor(){\n        super();\n        this.state = {\n            selectedRowKeys: [],\n            selectedRecord: {}\n        }\n    }\n\n    callBackFunc = (callBackData) => {\n        this.setState({ selectedRecord: callBackData.selectedRecord, selectedRowKeys: callBackData.selectedRowKeys });\n    }\n\n    // Dispatch action to delete inventory using API call\n    onDeleteClick = (selectedRecord) => {\n        this.props.deleteInventoryData(selectedRecord)\n                .then(res => {\n                    let deleteInventoryResponse = 'FAILURE';\n                    if (!_.isNil(this.props.deleteInventoryResList) && !_.isNil(this.props.deleteInventoryResList.deleteInventoryResList) &&\n                        this.props.deleteInventoryResList.deleteInventoryResList === 'SUCCESS'){\n                            deleteInventoryResponse = 'SUCCESS';\n                        }\n                        Modal.info({\n                            title: deleteInventoryResponse === 'SUCCESS'?'Successfully deleted the record':'Unable to delete a record'\n                        });\n                        this.props.deleteInventoryRes(null);\n                        this.props.getInventory();\n                });\n    }\n\n    render(){\n        let dataDisplay = {};\n        const { selectedRowKeys, selectedRecord } = this.state;\n        if (!_.isNil(this.props) && !_.isNil(this.props.getInventoryList) && !_.isNil(this.props.getInventoryList.getInventoryList) &&\n            !_.isNil(this.props.getInventoryList.getInventoryList.inventory) && !isEmpty(!_.isNil(this.props.getInventoryList.getInventoryList.inventory))){\n            dataDisplay = this.props.getInventoryList.getInventoryList.inventory;\n        }\n        return(\n            <div>\n                <Row>\n                    {/* Display Inventory list for the user to select an inventory and the delete the selcted inventory */}\n                    <Col span={24}>\n                    {\n                        !isEmpty(dataDisplay) && \n                        <InventoryTable \n                            selectedRecordFunction = {this.callBackFunc}\n                            selectedRowKeys = {selectedRowKeys}\n                            dataDisplay = {dataDisplay}/>\n                    }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={24}>\n                        {\n                            !isEmpty(dataDisplay) && !isEmpty(selectedRecord) &&\n                            <div>\n                                <Row>\n                                    <Col>\n                                        <Button\n                                            type='primary'\n                                            htmlType='submit'\n                                            size='large'\n                                            onClick={() => this.onDeleteClick(selectedRecord)}>\n                                            DELETE\n                                        </Button>\n                                    </Col>\n                                </Row>\n                            </div>\n                        }\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}; \n\nfunction mapStateToProps(state){\n    return{\n        getInventoryList: state.getInventoryList,\n        deleteInventoryResList: state.deleteInventoryResList\n    }\n}\n\nfunction mapDispatchToProps(dispatch){\n    return bindActionCreators({ getInventory, deleteInventoryData, deleteInventoryRes }, dispatch);\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DeleteInventory));"]},"metadata":{},"sourceType":"module"}