{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhil\\\\Desktop\\\\CRUD-master\\\\CRUD-master\\\\src\\\\components\\\\DeleteInventory.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport { Row, Col, Button, Modal } from 'antd';\nimport InventoryTable from './InventoryTable';\nimport { getInventory } from '../actions/readInventoryAction';\nimport { deleteInventoryData, deleteInventoryRes } from '../actions/deleteInventoryAction';\nimport data from '../data.json';\n\nvar _ = require('lodash');\n\nconst isEmpty = require('is-empty');\n\nclass DeleteInventory extends Component {\n  constructor() {\n    super();\n\n    this.callBackFunc = callBackData => {\n      console.log('check the selected rows----: ', callBackData.selectedRecord, callBackData.selectedRowKeys);\n      this.setState({\n        selectedRecord: callBackData.selectedRecord,\n        selectedRowKeys: callBackData.selectedRowKeys\n      });\n    };\n\n    this.onDeleteClick = selectedRecord => {\n      console.log('entered delete method:-------------------------------------');\n      this.props.deleteInventoryData(selectedRecord).then(res => {\n        console.log('will delete the record');\n        let deleteInventoryResponse = 'FAILURE';\n\n        if (!_.isNil(this.props.deleteInventoryResList) && !_.isNil(this.props.deleteInventoryResList.deleteInventoryResList) && this.props.deleteInventoryResList.deleteInventoryResList === 'SUCCESS') {\n          deleteInventoryResponse = 'SUCCESS';\n        }\n\n        console.log('check the delete INventory Response:-----------', deleteInventoryResponse);\n        Modal.info({\n          title: deleteInventoryResponse === 'SUCCESS' ? 'Successfully deleted the record' : 'Unable to delete a record'\n        });\n        this.props.deleteInventoryRes(null);\n        this.props.getInventory();\n      });\n    };\n\n    this.state = {\n      selectedRowKeys: [],\n      selectedRecord: {}\n    };\n  }\n\n  render() {\n    let dataDisplay = {};\n    const {\n      selectedRowKeys,\n      selectedRecord\n    } = this.state;\n    dataDisplay = data.inventoryRead;\n    console.log('check the props: ', this.props);\n\n    if (!_.isNil(this.props) && !_.isNil(this.props.getInventoryList) && !_.isNil(this.props.getInventoryList.getInventoryList) && !_.isNil(this.props.getInventoryList.getInventoryList.inventory) && !isEmpty(!_.isNil(this.props.getInventoryList.getInventoryList.inventory))) {\n      dataDisplay = this.props.getInventoryList.getInventoryList.inventory;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, !isEmpty(dataDisplay) && /*#__PURE__*/React.createElement(InventoryTable, {\n      selectedRecordFunction: this.callBackFunc,\n      selectedRowKeys: selectedRowKeys,\n      dataDisplay: dataDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, !isEmpty(dataDisplay) && !isEmpty(selectedRecord) && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      size: \"large\",\n      onClick: () => this.onDeleteClick(selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 41\n      }\n    }, \"DELETE\")))))));\n  }\n\n}\n\n;\n\nfunction mapStateToProps(state) {\n  return {\n    getInventoryList: state.getInventoryList,\n    deleteInventoryResList: state.deleteInventoryResList\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getInventory,\n    deleteInventoryData,\n    deleteInventoryRes\n  }, dispatch);\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DeleteInventory));","map":{"version":3,"sources":["C:/Users/abhil/Desktop/CRUD-master/CRUD-master/src/components/DeleteInventory.js"],"names":["React","Component","connect","bindActionCreators","withRouter","Row","Col","Button","Modal","InventoryTable","getInventory","deleteInventoryData","deleteInventoryRes","data","_","require","isEmpty","DeleteInventory","constructor","callBackFunc","callBackData","console","log","selectedRecord","selectedRowKeys","setState","onDeleteClick","props","then","res","deleteInventoryResponse","isNil","deleteInventoryResList","info","title","state","render","dataDisplay","inventoryRead","getInventoryList","inventory","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {bindActionCreators} from 'redux'; \nimport { withRouter } from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport { Row, Col, Button, Modal  } from 'antd';\nimport InventoryTable from './InventoryTable';\nimport {getInventory} from '../actions/readInventoryAction';\nimport {deleteInventoryData, deleteInventoryRes} from '../actions/deleteInventoryAction';\nimport data from '../data.json';\n\nvar _= require('lodash');\nconst isEmpty = require('is-empty');\n\nclass DeleteInventory extends Component{\n    constructor(){\n        super();\n        this.state = {\n            selectedRowKeys: [],\n            selectedRecord: {}\n        }\n    }\n\n    callBackFunc = (callBackData) => {\n        console.log('check the selected rows----: ',  callBackData.selectedRecord, callBackData.selectedRowKeys );\n        this.setState({ selectedRecord: callBackData.selectedRecord, selectedRowKeys: callBackData.selectedRowKeys });\n    }\n\n    onDeleteClick = (selectedRecord) => {\n        console.log('entered delete method:-------------------------------------');\n        this.props.deleteInventoryData(selectedRecord)\n                .then(res => {\n                    console.log('will delete the record');\n                    let deleteInventoryResponse = 'FAILURE';\n                    if (!_.isNil(this.props.deleteInventoryResList) && !_.isNil(this.props.deleteInventoryResList.deleteInventoryResList) &&\n                        this.props.deleteInventoryResList.deleteInventoryResList === 'SUCCESS'){\n                            deleteInventoryResponse = 'SUCCESS';\n                        }\n                        console.log('check the delete INventory Response:-----------', deleteInventoryResponse);\n                        Modal.info({\n                            title: deleteInventoryResponse === 'SUCCESS'?'Successfully deleted the record':'Unable to delete a record'\n                        });\n                        this.props.deleteInventoryRes(null);\n                        this.props.getInventory();\n                });\n    }\n\n    render(){\n        let dataDisplay = {};\n        const { selectedRowKeys, selectedRecord } = this.state;\n        dataDisplay = data.inventoryRead;\n        console.log('check the props: ', this.props);\n        if (!_.isNil(this.props) && !_.isNil(this.props.getInventoryList) && !_.isNil(this.props.getInventoryList.getInventoryList) &&\n            !_.isNil(this.props.getInventoryList.getInventoryList.inventory) && !isEmpty(!_.isNil(this.props.getInventoryList.getInventoryList.inventory))){\n            dataDisplay = this.props.getInventoryList.getInventoryList.inventory;\n        }\n        return(\n            <div>\n                <Row>\n                    <Col span={24}>\n                    {\n                        !isEmpty(dataDisplay) && \n                        <InventoryTable \n                            selectedRecordFunction = {this.callBackFunc}\n                            selectedRowKeys = {selectedRowKeys}\n                            dataDisplay = {dataDisplay}/>\n                    }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={24}>\n                        {\n                            !isEmpty(dataDisplay) && !isEmpty(selectedRecord) &&\n                            <div>\n                                <Row>\n                                    <Col>\n                                        <Button\n                                            type='primary'\n                                            htmlType='submit'\n                                            size='large'\n                                            onClick={() => this.onDeleteClick(selectedRecord)}>\n                                            DELETE\n                                        </Button>\n                                    </Col>\n                                </Row>\n                            </div>\n                        }\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}; \n\nfunction mapStateToProps(state){\n    return{\n        getInventoryList: state.getInventoryList,\n        deleteInventoryResList: state.deleteInventoryResList\n    }\n}\n\nfunction mapDispatchToProps(dispatch){\n    return bindActionCreators({ getInventory, deleteInventoryData, deleteInventoryRes }, dispatch);\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DeleteInventory));"]},"metadata":{},"sourceType":"module"}